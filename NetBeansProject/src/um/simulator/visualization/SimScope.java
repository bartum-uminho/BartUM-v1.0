package um.simulator.visualization;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import um.simulator.core.communications.MulticastStatusReceiver;
import um.simulator.core.communications.TCPClient;
import um.simulator.core.SimStatus;
import um.simulator.reporting.ReportingPlayer;

/**
 * This is the main class of the tool used to monitor the simulation status. It supports two modes: "Realtime" and "Playback".
 The "Realtime" mode gets the maps to display from the GlobalCoordinator through a TCP connection (using a TCPClient object),
 and the information about the status of each actor from the multicast channel (using a MulticastStatusReceiver object).
 The "Playback" mode gets all the information to display from a set of files generated previously
 through the Reporting function of the GlobalCoordinator.
 * @author ajcmoreira
 * @version 1.0
 */
public class SimScope extends javax.swing.JFrame {
    private final String aboutText = "<html>BartUM Urban Networking Simulator<br>Version 2.3 - 15.10.2017<br>&#169 University of Minho</html>";
    private final String welcomeMessageText = "<html><br><br><br><br><br><br>BartUM Urban Networking Simulator<br>Version 2.3 - 15.10.2017<br>University of Minho</html>";
    static TCPClient tcpLink;
    private final String globalCoordinatorIPaddress;
    private final int globalCoordinatorPort;
    static MulticastStatusReceiver multicastReceiver;
    private final String multicastAddress;
    private final int multicastPort;
    public static boolean keepUpdating = true; //used to control whether the simPanel should be updated or not
    private int pace = 100; //the pace (time interval in milliseconds) used to update the simPanel
    static ReportingPlayer reportingPlayer;
    public int playbackPaceFactor; //used to control de playback speed in playback mode
    public static boolean carsVisible = true;
    public static boolean pedestriansVisible = true;
    public static boolean tramsVisible = true;
    public static boolean othersVisible = true;
    public static boolean busVisible = true;
    public static boolean tlVisible = true;
    
    /**
     * Creates a new SimScope, initializes the GUI, and reads the configuration parameters.
     * The GUI is started in the "Welcome" mode, waiting for the user to select the desired mode.
     */
    public SimScope() {
        //initialize the GUI
        getContentPane().setBackground(Color.white);
        initComponents(); //creates the GUI components (panels, buttons, etc.) and sets the layout
        
        //set the GUI for the welcome screen, and wait for the user input
        startInterfaceInMode("welcome");
        
        //load the configuration file and read the configuration parameters
        System.out.print("  1. Loading and reading the configuration parameters...");
        Properties prop = new Properties();
        String settingsFile = "input/settings.properties";
        try {
            prop.load(new FileInputStream(settingsFile));
        }
        catch(IOException e) {
            System.out.println("Error reading configuration file "+ settingsFile);
            System.exit(0);
        }
	globalCoordinatorIPaddress = prop.getProperty("GlobalCoordinator.IP");
	globalCoordinatorPort = Integer.parseInt(prop.getProperty("GlobalCoordinator.port","7575"));
        multicastAddress = prop.getProperty("Multicast.IP");        
	multicastPort = Integer.parseInt(prop.getProperty("Multicast.port","7070"));
        System.out.println(" done.");
        new SimPanelUpdater(pace).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        actorsInfoPanel = new javax.swing.JPanel();
        actorType1CheckBox = new javax.swing.JCheckBox();
        actorsType1Number = new javax.swing.JLabel();
        actorType2CheckBox = new javax.swing.JCheckBox();
        actorType3CheckBox = new javax.swing.JCheckBox();
        actorType4CheckBox = new javax.swing.JCheckBox();
        actorType5CheckBox = new javax.swing.JCheckBox();
        actorType6CheckBox = new javax.swing.JCheckBox();
        actorType7CheckBox = new javax.swing.JCheckBox();
        actorType8CheckBox = new javax.swing.JCheckBox();
        actorType9CheckBox = new javax.swing.JCheckBox();
        actorType10CheckBox = new javax.swing.JCheckBox();
        actorsType2Number = new javax.swing.JLabel();
        actorsType3Number = new javax.swing.JLabel();
        actorsType4Number = new javax.swing.JLabel();
        actorsType5Number = new javax.swing.JLabel();
        actorsType6Number = new javax.swing.JLabel();
        actorsType7Number = new javax.swing.JLabel();
        actorsType8Number = new javax.swing.JLabel();
        actorsType9Number = new javax.swing.JLabel();
        actorsType10Number = new javax.swing.JLabel();
        generalControlPanel = new javax.swing.JPanel();
        snapshotButton = new javax.swing.JButton();
        realtimePauseResumeButton = new javax.swing.JButton();
        messageAreaPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        simPanel = new um.simulator.visualization.SimPanel();
        playbackControlPanel = new javax.swing.JPanel();
        playbackTimeSlider = new javax.swing.JSlider();
        playbackSlowerButton = new javax.swing.JButton();
        playbackStopButton = new javax.swing.JButton();
        playbackPlayPauseButton = new javax.swing.JButton();
        playbackFasterButton = new javax.swing.JButton();
        playbackControlSimSpeed = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        realtimeFileMenuOption = new javax.swing.JMenuItem();
        playbackFileMenuOption = new javax.swing.JMenuItem();
        exitFileMenuOption = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        mapsNodesViewMenuOption = new javax.swing.JMenuItem();
        actorsIdViewMenuOption = new javax.swing.JMenuItem();
        actorsLabelViewMenuOption1 = new javax.swing.JMenuItem();
        cursorCoordsViewMenuOption = new javax.swing.JMenuItem();
        busStopsViewMenuOption = new javax.swing.JMenuItem();
        Tram_Stops = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutHelpMenuOption = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        actorsInfoPanel.setBackground(new java.awt.Color(255, 255, 255));

        actorType1CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType1CheckBox.setSelected(true);
        actorType1CheckBox.setText("actorType1");
        actorType1CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorType1CheckBoxEvent(evt);
            }
        });

        actorsType1Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType1Number.setText("0");

        actorType2CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType2CheckBox.setSelected(true);
        actorType2CheckBox.setText("actorType2");
        actorType2CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorType2CheckBoxEvent(evt);
            }
        });

        actorType3CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType3CheckBox.setSelected(true);
        actorType3CheckBox.setText("actorType3");
        actorType3CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorType3CheckBoxEvent(evt);
            }
        });

        actorType4CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType4CheckBox.setSelected(true);
        actorType4CheckBox.setText("actorType4");
        actorType4CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorType4CheckBoxEvent(evt);
            }
        });

        actorType5CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType5CheckBox.setSelected(true);
        actorType5CheckBox.setText("actorType5");
        actorType5CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorType5CheckBoxActionPerformed(evt);
            }
        });

        actorType6CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType6CheckBox.setSelected(true);
        actorType6CheckBox.setText("actorType6");
        actorType6CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorType6CheckBoxActionPerformed(evt);
            }
        });

        actorType7CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType7CheckBox.setSelected(true);
        actorType7CheckBox.setText("actorType7");

        actorType8CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType8CheckBox.setSelected(true);
        actorType8CheckBox.setText("actorType8");

        actorType9CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType9CheckBox.setSelected(true);
        actorType9CheckBox.setText("actorType9");

        actorType10CheckBox.setBackground(new java.awt.Color(255, 255, 255));
        actorType10CheckBox.setSelected(true);
        actorType10CheckBox.setText("actorType10");

        actorsType2Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType2Number.setText("0");

        actorsType3Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType3Number.setText("0");

        actorsType4Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType4Number.setText("0");

        actorsType5Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType5Number.setText("0");

        actorsType6Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType6Number.setText("0");

        actorsType7Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType7Number.setText("0");

        actorsType8Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType8Number.setText("0");

        actorsType9Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType9Number.setText("0");

        actorsType10Number.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actorsType10Number.setText("0");

        org.jdesktop.layout.GroupLayout actorsInfoPanelLayout = new org.jdesktop.layout.GroupLayout(actorsInfoPanel);
        actorsInfoPanel.setLayout(actorsInfoPanelLayout);
        actorsInfoPanelLayout.setHorizontalGroup(
            actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(actorsInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType10CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType10Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(actorType1CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(actorType2CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(actorsType2Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                            .add(actorsType1Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType3CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType3Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType4CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType4Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType5CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType5Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType6CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType6Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType7CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType7Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType8CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType8Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .add(actorsInfoPanelLayout.createSequentialGroup()
                        .add(actorType9CheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actorsType9Number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );
        actorsInfoPanelLayout.setVerticalGroup(
            actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(actorsInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType1CheckBox)
                    .add(actorsType1Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType2CheckBox)
                    .add(actorsType2Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType3CheckBox)
                    .add(actorsType3Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType4CheckBox)
                    .add(actorsType4Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType5CheckBox)
                    .add(actorsType5Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType6CheckBox)
                    .add(actorsType6Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType7CheckBox)
                    .add(actorsType7Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType8CheckBox)
                    .add(actorsType8Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType9CheckBox)
                    .add(actorsType9Number))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actorsInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actorType10CheckBox)
                    .add(actorsType10Number))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        generalControlPanel.setBackground(new java.awt.Color(255, 255, 255));

        snapshotButton.setText("Snapshot");
        snapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapshotButtonActionPerformed(evt);
            }
        });

        realtimePauseResumeButton.setText("Pause");
        realtimePauseResumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realtimePauseResumeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout generalControlPanelLayout = new org.jdesktop.layout.GroupLayout(generalControlPanel);
        generalControlPanel.setLayout(generalControlPanelLayout);
        generalControlPanelLayout.setHorizontalGroup(
            generalControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(generalControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(generalControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(snapshotButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(realtimePauseResumeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        generalControlPanelLayout.setVerticalGroup(
            generalControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, generalControlPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(realtimePauseResumeButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(snapshotButton)
                .addContainerGap())
        );

        messageAreaPanel.setBackground(new java.awt.Color(255, 255, 255));

        messageArea.setColumns(20);
        messageArea.setRows(5);
        jScrollPane1.setViewportView(messageArea);

        org.jdesktop.layout.GroupLayout messageAreaPanelLayout = new org.jdesktop.layout.GroupLayout(messageAreaPanel);
        messageAreaPanel.setLayout(messageAreaPanelLayout);
        messageAreaPanelLayout.setHorizontalGroup(
            messageAreaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1)
        );
        messageAreaPanelLayout.setVerticalGroup(
            messageAreaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
        );

        simPanel.setBackground(new java.awt.Color(255, 255, 255));

        playbackControlPanel.setBackground(new java.awt.Color(255, 255, 255));

        playbackTimeSlider.setBackground(new java.awt.Color(255, 255, 255));

        playbackSlowerButton.setText("Slower");
        playbackSlowerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playbackSlowerButtonActionPerformed(evt);
            }
        });

        playbackStopButton.setText("Stop");
        playbackStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playbackStopButtonActionPerformed(evt);
            }
        });

        playbackPlayPauseButton.setText("Play/Pause");
        playbackPlayPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playbackPlayPauseButtonActionPerformed(evt);
            }
        });

        playbackFasterButton.setText("Faster");
        playbackFasterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playbackFasterButtonActionPerformed(evt);
            }
        });

        playbackControlSimSpeed.setText("1x");

        org.jdesktop.layout.GroupLayout playbackControlPanelLayout = new org.jdesktop.layout.GroupLayout(playbackControlPanel);
        playbackControlPanel.setLayout(playbackControlPanelLayout);
        playbackControlPanelLayout.setHorizontalGroup(
            playbackControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(playbackControlPanelLayout.createSequentialGroup()
                .add(playbackSlowerButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(playbackStopButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(playbackPlayPauseButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(playbackFasterButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(playbackControlSimSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(playbackTimeSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 459, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        playbackControlPanelLayout.setVerticalGroup(
            playbackControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, playbackControlPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(playbackControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(playbackTimeSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(playbackControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(playbackSlowerButton)
                        .add(playbackStopButton)
                        .add(playbackPlayPauseButton)
                        .add(playbackFasterButton)
                        .add(playbackControlSimSpeed)))
                .add(175, 175, 175))
        );

        fileMenu.setText("File");

        realtimeFileMenuOption.setText("Realtime");
        realtimeFileMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realtimeFileMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(realtimeFileMenuOption);

        playbackFileMenuOption.setText("Playback");
        playbackFileMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playbackFileMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(playbackFileMenuOption);

        exitFileMenuOption.setText("Exit");
        exitFileMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFileMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(exitFileMenuOption);

        MenuBar.add(fileMenu);

        viewMenu.setText("View");

        mapsNodesViewMenuOption.setText("Maps nodes");
        mapsNodesViewMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapsNodesViewMenuOptionActionPerformed(evt);
            }
        });
        viewMenu.add(mapsNodesViewMenuOption);

        actorsIdViewMenuOption.setText("Actors id");
        actorsIdViewMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorsIdViewMenuOptionActionPerformed(evt);
            }
        });
        viewMenu.add(actorsIdViewMenuOption);

        actorsLabelViewMenuOption1.setText("Actors label");
        actorsLabelViewMenuOption1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actorsLabelViewMenuOption1ActionPerformed(evt);
            }
        });
        viewMenu.add(actorsLabelViewMenuOption1);

        cursorCoordsViewMenuOption.setText("Cursor coordinates");
        cursorCoordsViewMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursorCoordsViewMenuOptionActionPerformed(evt);
            }
        });
        viewMenu.add(cursorCoordsViewMenuOption);

        busStopsViewMenuOption.setText("Bus Stops");
        busStopsViewMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busStopsViewMenuOptionActionPerformed(evt);
            }
        });
        viewMenu.add(busStopsViewMenuOption);

        Tram_Stops.setText("Tram Stops");
        Tram_Stops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tram_StopsActionPerformed(evt);
            }
        });
        viewMenu.add(Tram_Stops);

        MenuBar.add(viewMenu);

        helpMenu.setText("Help");

        aboutHelpMenuOption.setText("About");
        aboutHelpMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutHelpMenuOptionActionPerformed(evt);
            }
        });
        helpMenu.add(aboutHelpMenuOption);

        MenuBar.add(helpMenu);

        setJMenuBar(MenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, playbackControlPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(messageAreaPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, simPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, actorsInfoPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, generalControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(actorsInfoPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(simPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(playbackControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(7, 7, 7)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(messageAreaPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(generalControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void realtimeFileMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realtimeFileMenuOptionActionPerformed
        startInterfaceInMode("realtime");
    }//GEN-LAST:event_realtimeFileMenuOptionActionPerformed

    private void playbackFileMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playbackFileMenuOptionActionPerformed
        startInterfaceInMode("playback");
    }//GEN-LAST:event_playbackFileMenuOptionActionPerformed

    private void exitFileMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFileMenuOptionActionPerformed
        int exitChoice = JOptionPane.showConfirmDialog(rootPane, "Exit SimScope?", "Select and option:", JOptionPane.OK_CANCEL_OPTION);
        if(exitChoice == JOptionPane.OK_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitFileMenuOptionActionPerformed

/**
 * Toggles the visibility of the actors of type Tram.
 * @param evt 
 */
    private void actorType3CheckBoxEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorType3CheckBoxEvent
        tramsVisible = actorType3CheckBox.isSelected();
    }//GEN-LAST:event_actorType3CheckBoxEvent

    /**
     * Toggles the visibility of the actors of type Car.
     * @param evt 
     */
    private void actorType1CheckBoxEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorType1CheckBoxEvent
        carsVisible = actorType1CheckBox.isSelected();
    }//GEN-LAST:event_actorType1CheckBoxEvent

    /**
     * Toggle the visibility of the actors of type Pedestrian
     * @param evt 
     */
    private void actorType2CheckBoxEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorType2CheckBoxEvent
        pedestriansVisible = actorType2CheckBox.isSelected();
    }//GEN-LAST:event_actorType2CheckBoxEvent

    /**
     * Toggles the visibility of the actors of type Others.
     * @param evt 
     */
    private void actorType4CheckBoxEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorType4CheckBoxEvent
        othersVisible = actorType4CheckBox.isSelected();
    }//GEN-LAST:event_actorType4CheckBoxEvent

    /**
     * Toggles the visibility of the Maps' nodes.
     * @param evt 
     */
    private void mapsNodesViewMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapsNodesViewMenuOptionActionPerformed
        simPanel.drawPoints = !simPanel.drawPoints;
    }//GEN-LAST:event_mapsNodesViewMenuOptionActionPerformed

    /**
     * Toggles the visibility of the cursor coordinates.
     * @param evt 
     */
    private void cursorCoordsViewMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursorCoordsViewMenuOptionActionPerformed
        simPanel.drawCoordinates = !simPanel.drawCoordinates;
    }//GEN-LAST:event_cursorCoordsViewMenuOptionActionPerformed

    /**
     * Toggles the visibility of the actors info (over the actors, on the map).
     * @param evt 
     */
    private void actorsIdViewMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorsIdViewMenuOptionActionPerformed
        simPanel.drawActorsInfo = !simPanel.drawActorsInfo;
    }//GEN-LAST:event_actorsIdViewMenuOptionActionPerformed

    /**
     * Pause the updating of the simulation on the screen, or resume it. In Realtime mode, the evolution of the simulation
     * between a pause and a resume is lost from the point of view of the monitoring.
     * @param evt 
     */
    private void realtimePauseResumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realtimePauseResumeButtonActionPerformed
        if (keepUpdating) {
            keepUpdating = false;
            realtimePauseResumeButton.setText("Resume");
            //disable the View Menu while in Pause mode
            viewMenu.setEnabled(false);
        }
        else {
            keepUpdating = true;
            realtimePauseResumeButton.setText("Pause");
            //enable the View Menu again
            viewMenu.setEnabled(true);
        }
    }//GEN-LAST:event_realtimePauseResumeButtonActionPerformed

    private void snapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapshotButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_snapshotButtonActionPerformed

    /**
     * Shows the About information.
     * @param evt 
     */
    private void aboutHelpMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutHelpMenuOptionActionPerformed
        popupBox(aboutText, "BartUM");
    }//GEN-LAST:event_aboutHelpMenuOptionActionPerformed

    private void playbackStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playbackStopButtonActionPerformed
        //stop the playback, for good
        reportingPlayer.stopPlaying();
        simPanel.showAll();
        keepUpdating = false;
        startInterfaceInMode("welcome"); //leaving the current simulation in the background
    }//GEN-LAST:event_playbackStopButtonActionPerformed

    private void playbackSlowerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playbackSlowerButtonActionPerformed
        //decrease the playback speed
        reportingPlayer.setPlaybackPaceFactor(reportingPlayer.getPlaybackPaceFactor() / 2);
        if (reportingPlayer.getPlaybackPaceFactor() >= 1.0) {
            playbackControlSimSpeed.setText((int)reportingPlayer.getPlaybackPaceFactor() + " x");
        }
        else {
            playbackControlSimSpeed.setText("1/" + (int)(1/reportingPlayer.getPlaybackPaceFactor()) + " x");
        }
    }//GEN-LAST:event_playbackSlowerButtonActionPerformed

    private void playbackFasterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playbackFasterButtonActionPerformed
        //increase the playback speed
        reportingPlayer.setPlaybackPaceFactor(reportingPlayer.getPlaybackPaceFactor() * 2);
        if (reportingPlayer.getPlaybackPaceFactor() >= 1.0) {
            playbackControlSimSpeed.setText((int)reportingPlayer.getPlaybackPaceFactor() + " x");
        }
        else {
            playbackControlSimSpeed.setText("1/" + (int)(1/reportingPlayer.getPlaybackPaceFactor()) + " x");
        }
    }//GEN-LAST:event_playbackFasterButtonActionPerformed

    private void playbackPlayPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playbackPlayPauseButtonActionPerformed
        //toggle between pause and play of the current playback
        if (reportingPlayer.getPauseStatus()) {
            reportingPlayer.resumePlay();
            //disable the fast forward and fast rewind buttons
            playbackSlowerButton.setEnabled(true);
            playbackFasterButton.setEnabled(true);
        }
        else {
            reportingPlayer.pausePlay();
            //disable the fast forward and fast rewind buttons
            playbackSlowerButton.setEnabled(false);
            playbackFasterButton.setEnabled(false);
        }
    }//GEN-LAST:event_playbackPlayPauseButtonActionPerformed

    private void actorType6CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorType6CheckBoxActionPerformed
        // TODO add your handling code here:
        tlVisible=actorType6CheckBox.isSelected();
    }//GEN-LAST:event_actorType6CheckBoxActionPerformed

    private void busStopsViewMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busStopsViewMenuOptionActionPerformed
        // TODO add your handling code here:
        simPanel.drawStops = !simPanel.drawStops;
    }//GEN-LAST:event_busStopsViewMenuOptionActionPerformed

    private void Tram_StopsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tram_StopsActionPerformed
        // TODO add your handling code here:
        simPanel.drawTram_Stops = !simPanel.drawTram_Stops;
    }//GEN-LAST:event_Tram_StopsActionPerformed

    private void actorsLabelViewMenuOption1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorsLabelViewMenuOption1ActionPerformed
        // TODO add your handling code here:
       simPanel.drawActorsLabel= !simPanel.drawActorsLabel;
    }//GEN-LAST:event_actorsLabelViewMenuOption1ActionPerformed

    private void actorType5CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actorType5CheckBoxActionPerformed
        // TODO add your handling code here:
        busVisible= actorType5CheckBox.isSelected();
    }//GEN-LAST:event_actorType5CheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         * ajcmoreira: changed to Metal.
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimScope.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SimScope().setVisible(true);
            }
        });
    }
    
    /**
     * This method reconfigures the GUI from the initial mode ("Welcome") to the modes "Realtime" or "PlayBack", and starts the corresponding mode.
     * @param mode The mode to which the GUI should be reconfigured and started.
     */
    private void startInterfaceInMode(String mode) {
        switch (mode) {
            case "welcome":
                //shows the welcome message, only
                simPanel.showWelcomeMessage(welcomeMessageText);
                realtimeFileMenuOption.setEnabled(true); //enable realtime mode
                playbackFileMenuOption.setEnabled(true); //enable playback mode
                messageAreaPanel.setVisible(false);
                actorsInfoPanel.setVisible(false);
                playbackControlPanel.setVisible(false);
                generalControlPanel.setVisible(false);
                break;
            case "realtime":
                
                //starts the realtime mode by reconfiguring the GUI
                realtimeFileMenuOption.setEnabled(false); //disable this mode to prevent starting it again
                playbackFileMenuOption.setEnabled(true); //enable playback mode
                simPanel.mapsVisible = true; //maps and actors should now be displayed
                simPanel.welcomeMessage.setVisible(false); //hide the welcome screen
                //draw a border around the simPanel
                simPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(202, 202, 202)));
                //add the remaining components
                messageAreaPanel.setVisible(true);
                actorsInfoPanel.setVisible(true);
                realtimePauseResumeButton.setVisible(true);
                playbackControlPanel.setVisible(false);
                generalControlPanel.setVisible(true);
                snapshotButton.setEnabled(false); //not yet supported
                initActorsInfo(); //hide all the information about the number of actors
                //start the party!
                writeMessage("Starting Realtime mode...\n");
                
                // stop the ReportingPlayer, if it exists, and clear the SimStatus
                if(reportingPlayer != null)
                    reportingPlayer.stopPlaying();
                SimStatus.clear();
                keepUpdating = true;
                //create a TCPClient and request the maps
                writeMessage("1. Connecting to the GlobalCoordinator...\n");
                tcpLink = new TCPClient(globalCoordinatorIPaddress, globalCoordinatorPort, "visualization");
                writeMessage("2. Getting the maps...");
                tcpLink.start();
                try {
                    tcpLink.join();
                } catch (InterruptedException ex) {
                    Logger.getLogger(SimScope.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(tcpLink.mapsReceived) {
                    writeMessage(" done.\n");
                    simPanel.initSimPanel(); //compute the limits of the maps, and sets the scale factors
                    //create and start a MulticastStatusReceiver, or resume its operation if paused
                    if(multicastReceiver == null) {
                        writeMessage("3. Starting to monitor the ongoing simulation...\n");
                        multicastReceiver = new MulticastStatusReceiver(multicastAddress, multicastPort);
                        multicastReceiver.start();
                    }
                    else {
                        writeMessage("3. Re-starting to monitor the ongoing simulation...\n");
                        multicastReceiver.resumeReception();
                    }
                    //start updating the simPanel automatically
                    simPanel.updateSimPanel = true;
                }
                else {
                    writeMessage(" unable to get the maps! Check if the GlobalCoordinator is running.\n");
                    startInterfaceInMode("welcome");
                }
                break;
            case "playback":
                //starts the playback mode by reconfiguring the GUI
                playbackFileMenuOption.setEnabled(false); //disable this mode to prevent starting it again
                realtimeFileMenuOption.setEnabled(true); //enable realtime mode
                simPanel.mapsVisible = true; //maps and actors should now be displayed
                simPanel.welcomeMessage.setVisible(false); //hide the welcome screen
                //draw a border around the simPanel
                simPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(202, 202, 202)));
                //hide some components
                generalControlPanel.setVisible(false);
                snapshotButton.setEnabled(false); //not yet supported
                initActorsInfo(); //hide all the information about the number of actors
                //start the party!
                writeMessage("Starting Playback mode...\n");
                //pause the MulticastStatusReceiver, if it exists, and clear the SimStatus
                if(multicastReceiver != null)
                    multicastReceiver.pauseReception();
                SimStatus.clear();
                keepUpdating = true;
                //reset to realtime playback
                //prompt the user to select a reporting file to open
                writeMessage("1. Waiting for the user to select the file to open...\n");
                String selectedFileName = selectFile();
                if (selectedFileName != null) {
                    //continue with the configuration of the GUI
                    messageAreaPanel.setVisible(true);
                    actorsInfoPanel.setVisible(true);
                    realtimePauseResumeButton.setVisible(true);
                    playbackControlPanel.setVisible(true);
                    //create a Reporting player
                    reportingPlayer = new ReportingPlayer();
                    reportingPlayer.setPlaybackPaceFactor(1); //reset to realtime
                    //check if the selected file is valid and, if yes, set the baseFileName
                    if (reportingPlayer.setBaseFileName(selectedFileName)) {
                        if (reportingPlayer.checkFiles()) {
                            //load the maps
                            writeMessage("2. Loading the maps...");
                            reportingPlayer.loadMaps();
                            writeMessage(" done.\n");
                            simPanel.initSimPanel(); //compute the limits of the maps, and sets the scale factors
                            writeMessage("3. Starting to monitor the recorded simulation...\n");
                            //start the ReportingPlayer
                            reportingPlayer.start();
                            //start updating the simPanel automatically
                            simPanel.updateSimPanel = true;
                        }
                        else {
                            popupBox("Not all the required files (Maps, Load, Acts, Sets) have been found.","Missing files!");
                            startInterfaceInMode("welcome");
                        }
                    }
                    else {
                        popupBox("The selected file (" + selectedFileName + ") is not of a valid reporting file.","Wrong file!");
                        startInterfaceInMode("welcome");
                    }
                }
                else {
                    startInterfaceInMode("welcome");
                }
                break;
            default:
                System.out.println("Unknown mode. Exiting!");
                System.exit(0);
                break;
        }
    }
    
    /**
     * Updates all the components in the GUI, including the simPanel.
     */
    public static void updateAll() {
        //update the number of actors
        updateActorsInfo();
        //repaint the simPanel
        simPanel.repaint();
    }
    
    /**
     * Initializes the GUI components responsible to show the number of actors of each type (Cars, Pedestrians, etc.).
     * Initially, all these components are hidden; they are then turned visible as the number of actors of a
     * particular type gets higher than zero (see updateActorsInfo()).
     */
    private void initActorsInfo() {
        actorType1CheckBox.setVisible(false);
        actorsType1Number.setVisible(false);
        actorType2CheckBox.setVisible(false);
        actorsType2Number.setVisible(false);
        actorType3CheckBox.setVisible(false);
        actorsType3Number.setVisible(false);
        actorType4CheckBox.setVisible(false);
        actorsType4Number.setVisible(false);
        actorType5CheckBox.setVisible(false);
        actorsType5Number.setVisible(false);
        actorType6CheckBox.setVisible(false);
        actorsType6Number.setVisible(false);
        actorType7CheckBox.setVisible(false);
        actorsType7Number.setVisible(false);
        actorType8CheckBox.setVisible(false);
        actorsType8Number.setVisible(false);
        actorType9CheckBox.setVisible(false);
        actorsType9Number.setVisible(false);
        actorType10CheckBox.setVisible(false);
        actorsType10Number.setVisible(false);
    }
    
    /**
     * Update the value and visibility of the GUI components responsible to show the number of actors of each type (Cars, Pedestrians, etc.).
     */
    private static void updateActorsInfo() {
        if (simPanel.numberOfActors > 0) {
            if (simPanel.numberOfCars > 0) {
                actorType1CheckBox.setText("Cars");
                actorType1CheckBox.setVisible(true);
                actorsType1Number.setText(Integer.toString(simPanel.numberOfCars));
                actorsType1Number.setVisible(true);
            }
            else {
                actorType1CheckBox.setVisible(false);
                actorsType1Number.setVisible(false);
            }
            if (simPanel.numberOfPedestrians > 0) {
                actorType2CheckBox.setText("Pedestrians");
                actorType2CheckBox.setVisible(true);
                actorsType2Number.setText(Integer.toString(simPanel.numberOfPedestrians));
                actorsType2Number.setVisible(true);
            }
            else {
                actorType2CheckBox.setVisible(false);
                actorsType2Number.setVisible(false);
            }
            if (simPanel.numberOfTrams > 0) {
                actorType3CheckBox.setText("Trams");
                actorType3CheckBox.setVisible(true);
                actorsType3Number.setText(Integer.toString(simPanel.numberOfTrams));
                actorsType3Number.setVisible(true);
            }
            else {
                actorType3CheckBox.setVisible(false);
                actorsType3Number.setVisible(false);
            }
            //bus
            if(simPanel.numberOfBus > 0) // condições verdadeiras
            {
                //texto de checkbox
                actorType5CheckBox.setText("Bus");
                //visibilidade da checkbx
                actorType5CheckBox.setVisible(true);
                //info labels
                actorsType5Number.setText(Integer.toString(simPanel.numberOfBus));
                actorsType5Number.setVisible(true);
            }  
            else //condições falsas
            {
                actorType5CheckBox.setVisible(false);
                actorsType5Number.setVisible(false);
            }
            /*
            //Traffic ligh
            if(simPanel.numberOfTL > 0) // condições verdadeiras
            {
                //texto de checkbox
                actorType6CheckBox.setText("TL");
                //visibilidade da checkbx
                actorType6CheckBox.setVisible(true);
                //info labels
                actorsType6Number.setText(Integer.toString(simPanel.numberOfTL));
                actorsType6Number.setVisible(true);
            }  
            else //condições falsas
            {
                actorType6CheckBox.setVisible(false);
                actorsType6Number.setVisible(false);
            }*/
            
            
            if ((simPanel.numberOfActors - simPanel.numberOfCars - simPanel.numberOfPedestrians - simPanel.numberOfTrams - simPanel.numberOfBus) > 0) {
                actorType4CheckBox.setText("TL");
                actorType4CheckBox.setVisible(true);
                actorsType4Number.setText(Integer.toString(simPanel.numberOfActors - simPanel.numberOfCars - simPanel.numberOfPedestrians - simPanel.numberOfTrams - simPanel.numberOfBus));
                actorsType4Number.setVisible(true);
            }
            else {
                actorType4CheckBox.setVisible(false);
                actorsType4Number.setVisible(false);
            }
        }
    }
    
    /**
     * This method prompts the user to select a file to be open.
     * @return The name of the selected file.
     */
    private String selectFile() {
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Reporting files", "txt");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
System.out.println("You choose to open file: " + fc.getSelectedFile().getName());
        return fc.getSelectedFile().getName();
        }
        else {
System.out.println("You canceled the file selection!");
            return null;
        }
    }
    
    /**
     * Write (append) a message to the messageArea component.
     * @param message 
     */
    private void writeMessage(String message) {
        messageArea.append(message);
    }
    
    
    /**
     * Pops up a message box.
     * @param message msg
     * @param titleBar title
     */
    public void popupBox(String message, String titleBar)
    {
        JOptionPane.showMessageDialog(this, message, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem Tram_Stops;
    private javax.swing.JMenuItem aboutHelpMenuOption;
    private static javax.swing.JCheckBox actorType10CheckBox;
    private static javax.swing.JCheckBox actorType1CheckBox;
    private static javax.swing.JCheckBox actorType2CheckBox;
    private static javax.swing.JCheckBox actorType3CheckBox;
    private static javax.swing.JCheckBox actorType4CheckBox;
    private static javax.swing.JCheckBox actorType5CheckBox;
    private static javax.swing.JCheckBox actorType6CheckBox;
    private static javax.swing.JCheckBox actorType7CheckBox;
    private static javax.swing.JCheckBox actorType8CheckBox;
    private static javax.swing.JCheckBox actorType9CheckBox;
    private javax.swing.JMenuItem actorsIdViewMenuOption;
    private javax.swing.JPanel actorsInfoPanel;
    private javax.swing.JMenuItem actorsLabelViewMenuOption1;
    private static javax.swing.JLabel actorsType10Number;
    private static javax.swing.JLabel actorsType1Number;
    private static javax.swing.JLabel actorsType2Number;
    private static javax.swing.JLabel actorsType3Number;
    private static javax.swing.JLabel actorsType4Number;
    private static javax.swing.JLabel actorsType5Number;
    private static javax.swing.JLabel actorsType6Number;
    private static javax.swing.JLabel actorsType7Number;
    private static javax.swing.JLabel actorsType8Number;
    private static javax.swing.JLabel actorsType9Number;
    private javax.swing.JMenuItem busStopsViewMenuOption;
    private javax.swing.JMenuItem cursorCoordsViewMenuOption;
    private javax.swing.JMenuItem exitFileMenuOption;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel generalControlPanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mapsNodesViewMenuOption;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JPanel messageAreaPanel;
    private javax.swing.JPanel playbackControlPanel;
    private javax.swing.JLabel playbackControlSimSpeed;
    private javax.swing.JButton playbackFasterButton;
    private javax.swing.JMenuItem playbackFileMenuOption;
    private javax.swing.JButton playbackPlayPauseButton;
    private javax.swing.JButton playbackSlowerButton;
    private javax.swing.JButton playbackStopButton;
    private javax.swing.JSlider playbackTimeSlider;
    private javax.swing.JMenuItem realtimeFileMenuOption;
    private javax.swing.JButton realtimePauseResumeButton;
    private static um.simulator.visualization.SimPanel simPanel;
    private javax.swing.JButton snapshotButton;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
