/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package um.simulator.comm.network;

import um.simulator.comm.application.ApplicationLayer;
import java.io.PrintWriter;
import java.util.ArrayList;
import um.simulator.comm.application.APDU;
import um.simulator.comm.application.ApplicationLayer;
import um.simulator.comm.link.LinkLayer;

/**
 * This class represents the network layer.
 * @author joaop
 * @version 1.0
 */
public class NetworkLayer {
    
    public LinkLayer link; 
    public NetworkProtocol proto;
    public ApplicationLayer appLayer; 
    
    /**
     * Constructor: Creates the network layer.
     * 
     * Initializes the network protocol and the application layer.
     * @param wave  a linklayer protocol
     * @param protocol  a network protocol
     * @param protocolQueue a size for the queue
     * @param numberOfRetransmissions a maximum number of retransmissions
     */
    public NetworkLayer(LinkLayer wave, String protocol, int protocolQueue, int numberOfRetransmissions) {
        link = wave;
        
        /** iniciates the protocol */
        if(protocol.equalsIgnoreCase("Epidemic")){
            proto = new Epidemic(link, link.phy.actor.getActorId(), protocolQueue);
            proto.start();
        }
        else if(protocol.equalsIgnoreCase("SprayAndWait")){
            proto = new SprayAndWait(link, link.phy.actor.getActorId(), protocolQueue, numberOfRetransmissions);
            proto.start();
        }
        else if(protocol.equalsIgnoreCase("DirectDelivery")){
            proto = new DirectDelivery(link,link.phy.actor.getActorId(),protocolQueue);
            proto.start();
        }
        else if(protocol.equalsIgnoreCase("PRoPHET")){
            proto = new PRoPHET(link,link.phy.actor.getActorId(),protocolQueue);
            proto.start();
        }
        /** iniciates the application Layer */
        appLayer = new ApplicationLayer(link.phy.actor.getActorId(), 
                link.phy.actor.getAppName(), link.phy.actor.getOpMode() ,this);
    }
    
    /**
     * A data packet is generated by appLayer
     * 
     * @param destAddress a string containing a destination node
     * @param apdu an application pdu
     */
    public void generatedDataPacket(String destAddress, APDU apdu){
        proto.generatedDataPacket(destAddress, apdu);
    }
    
    /** Flushes the lower layer */
    public void flush() {
        link.flush();
    }
    
    
    /**
     * Sends frames to the application layer. 
     * Sends them to the protocol to be analised, 
     * the result (list of APDU) is sent to the appLayer
     * 
     * @param frames the list of npdu received
     */
    public void sendPacketUp(ArrayList<NPDU> frames) {
        appLayer.receivePacketsUp(proto.sendPacketsUp(frames));    
    }
    
    /**
     * End Network Layer activity.
     * The protocol thread is ended.
     */
    public void turnOffLayer(){
        proto.endProtocol();
    }
    
    /**
     * Gets the buffer occupation.
     */
    public void getBufferOcupation() {
        proto.getBufferOcupation();
    }
    
}
